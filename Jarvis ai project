Jarvis created 
By Loren Holmes
import pyttsx3
import speech_recognition as sr
import datetime
import wikipedia
import webbrowser
import os
import random
pip install --upgrade pyttsx3 speechrecognition
import pyttsx3
# Initialize the text-to-speech engine
engine = pyttsx3.init()
import pyttsx3
# Initialize the text-to-speech engine
engine = pyttsx3.init()
# Set the voice rate
engine.setProperty('rate', 150)
import pyttsx3
# Function to speak the given text
def speak(text):
    engine = pyttsx3.init()
    engine.say(text)
    engine.runAndWait()
import datetime
# Function to greet the user
def greet():
    hour = datetime.datetime.now().hour
    if hour >= 0 and hour < 12:
        speak("Good Morning!")
    elif hour >= 12 and hour < 18:
        speak("Good Afternoon!")
    else:
        speak("Good Evening!")
    speak("I am Jarvis, your personal AI assistant. How can I assist you today?")
# Function to speak the message
def speak(message):
    print(message)
# Call the greet() function
greet()
import speech_recognition as sr
# Function to take user's command
def take_command():
    r = sr.Recognizer()
    with sr.Microphone() as source:
        print("Listening...")
        r.pause_threshold = 1
        audio = r.listen(source)
def recognize_speech(audio):
    try:
        print("Recognizing...")
        query = r.recognize_google(audio, language='en-in')
        print(f"User said: {query}\n")
        return query
    except Exception as e:
        print("Sorry, I didn't catch that. Can you please repeat?")
        return "None"
import wikipedia
# Function to execute user's command
def execute_command(command):
    if 'wikipedia' in command.lower():
        speak('Searching Wikipedia...')
        command = command.replace("wikipedia", "")
        results = wikipedia.summary(command, sentences=2)
        speak("According to Wikipedia")
        print(results)
        speak(results)
    elif 'open youtube' in command.lower():
        webbrowser.open("https://www.youtube.com")
    elif 'open google' in command.lower():
        webbrowser.open("https://www.google.com")
    elif 'play music' in command.lower():
        music_dir = 'path/to/music/folder'
        songs = os.listdir(music_dir)
        random.shuffle(songs)
        os.startfile(os.path.join(music_dir, songs[0]))
    elif 'time' in command.lower():
        strTime = datetime.datetime.now().strftime("%H:%M:%S")
        speak(f"The time is {strTime}")
    elif 'exit' in command.lower():
        speak("Goodbye!")
        exit()
    else:
        speak("Sorry, I am not programmed to perform that task.")
# Main function
if __name__ == "__main__":
    greet()
    while True:
        command = take_command().lower()
        execute_command(command)
from chatterbot import ChatBot
from chatterbot.trainers import ChatterBotCorpusTrainer
# Create ChatBot instance
chatbot = ChatBot('TermuxAI')
# Create a trainer for the chatbot
trainer = ChatterBotCorpusTrainer(chatbot)
# Train the chatbot using the English corpus
trainer.train("chatterbot.corpus.english")
from chatterbot import ChatBot
from chatterbot.trainers import ChatterBotCorpusTrainer
# Create ChatBot instance
chatbot = ChatBot('TermuxAI')
# Create a trainer for the chatbot
trainer = ChatterBotCorpusTrainer(chatbot)
# Train the chatbot using the English corpus
trainer.train("chatterbot.corpus.english")
# Start the conversation loop
while True:
    user_input = input('You: ')
    bot_response = chatbot.get_response(user_input)
    print('TermuxAI:', bot_response)
